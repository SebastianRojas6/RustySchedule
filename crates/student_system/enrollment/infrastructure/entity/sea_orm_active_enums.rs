//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use std::fmt;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "curriculum_type")]
pub enum CurriculumType {
    #[sea_orm(string_value = "obligatory")]
    Obligatory,
    #[sea_orm(string_value = "elective")]
    Elective,
    #[sea_orm(string_value = "prerequisite")]
    Prerequisite,
}

impl fmt::Display for CurriculumType {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let curriculum_str = match self {
            CurriculumType::Obligatory => "obligatory",
            CurriculumType::Elective => "elective",
            CurriculumType::Prerequisite => "prerequisite",
        };
        write!(f, "{}", curriculum_str)
    }
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "day_type")]
pub enum DayType {
    #[sea_orm(string_value = "monday")]
    Monday,
    #[sea_orm(string_value = "tuesday")]
    Tuesday,
    #[sea_orm(string_value = "wednesday")]
    Wednesday,
    #[sea_orm(string_value = "thursday")]
    Thursday,
    #[sea_orm(string_value = "friday")]
    Friday,
    #[sea_orm(string_value = "saturday")]
    Saturday,
    #[sea_orm(string_value = "sunday")]
    Sunday,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "enrollment_status")]
pub enum EnrollmentStatus {
    #[sea_orm(string_value = "enrolled")]
    Enrolled,
    #[sea_orm(string_value = "withdrawn")]
    Withdrawn,
    #[sea_orm(string_value = "completed")]
    Completed,
    #[sea_orm(string_value = "failed")]
    Failed,
    #[sea_orm(string_value = "pending")]
    Pending,
    #[sea_orm(string_value = "dropped")]
    Dropped,
}

impl fmt::Display for EnrollmentStatus {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let status_str = match self {
            EnrollmentStatus::Enrolled => "Enrolled",
            EnrollmentStatus::Completed => "Completed",
            EnrollmentStatus::Withdrawn => "Withdrawn",
            EnrollmentStatus::Failed => "Failed",
            EnrollmentStatus::Pending => "Pending",
            EnrollmentStatus::Dropped => "Dropped",
  
        };
        write!(f, "{}", status_str)
    }
}


#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "session_type")]
pub enum SessionType {
    #[sea_orm(string_value = "theory")]
    Theory,
    #[sea_orm(string_value = "lab")]
    Lab,
    #[sea_orm(string_value = "seminar")]
    Seminar,
    #[sea_orm(string_value = "practice")]
    Practice,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "student_status")]
pub enum StudentStatus {
    #[sea_orm(string_value = "regular")]
    Regular,
    #[sea_orm(string_value = "observado")]
    Observado,
    #[sea_orm(string_value = "graduated")]
    Graduated,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "teacher_contract")]
pub enum TeacherContract {
    #[sea_orm(string_value = "contratado")]
    Contratado,
    #[sea_orm(string_value = "principal")]
    Principal,
    #[sea_orm(string_value = "asociado")]
    Asociado,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "user_role")]
#[derive(serde::Serialize)]
pub enum UserRole {
    #[sea_orm(string_value = "student")]
    Student,
    #[sea_orm(string_value = "teacher")]
    Teacher,
    #[sea_orm(string_value = "admin")]
    Admin,
    #[sea_orm(string_value = "coordinator")]
    Coordinator,
}
