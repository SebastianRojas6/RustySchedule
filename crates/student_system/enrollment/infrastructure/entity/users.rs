//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::StudentStatus;
use super::sea_orm_active_enums::TeacherContract;
use super::sea_orm_active_enums::UserRole;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(unique)]
    pub code: String,
    #[sea_orm(unique)]
    pub email: Option<String>,
    pub phone: Option<String>,
    pub faculty: String,
    pub program: String,
    pub specialty: String,
    pub role: UserRole,
    pub student_status: Option<StudentStatus>,
    pub admission_date: Option<Date>,
    pub contract_type: Option<TeacherContract>,
    pub max_hours_per_week: Option<i32>,
    pub hire_date: Option<Date>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::courses::Entity")]
    Courses,
    #[sea_orm(has_many = "super::enrollments::Entity")]
    Enrollments,
}

impl Related<super::courses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Courses.def()
    }
}

impl Related<super::enrollments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Enrollments.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
