//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use super::sea_orm_active_enums::CurriculumType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "courses")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub code: String,
    pub name: String,
    pub section: i32,
    pub curriculum: CurriculumType,
    pub capacity: i32,
    pub credits: i32,
    pub hours_per_week: i32,
    pub cycle: i32,
    pub teacher_id: String,
    pub facility_id: String,
    pub enrolled: i32,
    pub max_capacity: Option<i32>,
    pub available_spots: Option<i32>,
    pub semester: String,
    pub academic_year: i32,
    pub active: Option<bool>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::course_schedules::Entity")]
    CourseSchedules,
    #[sea_orm(has_many = "super::enrollments::Entity")]
    Enrollments,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::TeacherId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::course_schedules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CourseSchedules.def()
    }
}

impl Related<super::enrollments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Enrollments.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
