//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

use crate::domain::models::enums::{ContractType as Contract, Curriculum, EnrollmentStatus as Enrollment, SessionType as Session, StudentStatus as Student, Weekday};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "curriculum_type")]
pub enum CurriculumType {
    #[sea_orm(string_value = "obligatory")]
    Obligatory,
    #[sea_orm(string_value = "elective")]
    Elective,
    #[sea_orm(string_value = "prerequisite")]
    Prerequisite,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "day_type")]
pub enum DayType {
    #[sea_orm(string_value = "monday")]
    Monday,
    #[sea_orm(string_value = "tuesday")]
    Tuesday,
    #[sea_orm(string_value = "wednesday")]
    Wednesday,
    #[sea_orm(string_value = "thursday")]
    Thursday,
    #[sea_orm(string_value = "friday")]
    Friday,
    #[sea_orm(string_value = "saturday")]
    Saturday,
    #[sea_orm(string_value = "sunday")]
    Sunday,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "enrollment_status")]
pub enum EnrollmentStatus {
    #[sea_orm(string_value = "enrolled")]
    Enrolled,
    #[sea_orm(string_value = "withdrawn")]
    Withdrawn,
    #[sea_orm(string_value = "completed")]
    Completed,
    #[sea_orm(string_value = "failed")]
    Failed,
    #[sea_orm(string_value = "pending")]
    Pending,
    #[sea_orm(string_value = "dropped")]
    Dropped,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "session_type")]
pub enum SessionType {
    #[sea_orm(string_value = "theory")]
    Theory,
    #[sea_orm(string_value = "lab")]
    Lab,
    #[sea_orm(string_value = "seminar")]
    Seminar,
    #[sea_orm(string_value = "practice")]
    Practice,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "student_status")]
pub enum StudentStatus {
    #[sea_orm(string_value = "regular")]
    Regular,
    #[sea_orm(string_value = "observado")]
    Observado,
    #[sea_orm(string_value = "graduated")]
    Graduated,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Hash)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "teacher_contract")]
pub enum TeacherContract {
    #[sea_orm(string_value = "contratado")]
    Contratado,
    #[sea_orm(string_value = "principal")]
    Principal,
    #[sea_orm(string_value = "asociado")]
    Asociado,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "user_role")]
pub enum UserRole {
    #[sea_orm(string_value = "student")]
    Student,
    #[sea_orm(string_value = "teacher")]
    Teacher,
    #[sea_orm(string_value = "admin")]
    Admin,
    #[sea_orm(string_value = "coordinator")]
    Coordinator,
}

impl UserRole {
    pub fn to_string(&self) -> String {
        match self {
            UserRole::Student => "student".to_string(),
            UserRole::Teacher => "teacher".to_string(),
            UserRole::Admin => "admin".to_string(),
            UserRole::Coordinator => "coordinator".to_string(),
        }
    }

    pub fn from_string(role: &str) -> Option<Self> {
        match role {
            "student" => Some(UserRole::Student),
            "teacher" => Some(UserRole::Teacher),
            "admin" => Some(UserRole::Admin),
            "coordinator" => Some(UserRole::Coordinator),
            _ => None,
        }
    }
}

pub fn to_domain_curriculum(curr: &CurriculumType) -> Curriculum {
    match curr {
        CurriculumType::Obligatory => Curriculum::Obligatory,
        CurriculumType::Elective => Curriculum::Elective,
        CurriculumType::Prerequisite => Curriculum::Prerequisite,
    }
}

pub fn to_db_curriculum(curr: &Curriculum) -> CurriculumType {
    match curr {
        Curriculum::Obligatory => CurriculumType::Obligatory,
        Curriculum::Elective => CurriculumType::Elective,
        Curriculum::Prerequisite => CurriculumType::Prerequisite,
    }
}

pub fn to_domain_weekday(day: &DayType) -> Weekday {
    match day {
        DayType::Monday => Weekday::Monday,
        DayType::Tuesday => Weekday::Tuesday,
        DayType::Wednesday => Weekday::Wednesday,
        DayType::Thursday => Weekday::Thursday,
        DayType::Friday => Weekday::Friday,
        DayType::Saturday => Weekday::Saturday,
        DayType::Sunday => Weekday::Sunday,
    }
}

pub fn to_db_daytype(day: &Weekday) -> DayType {
    match day {
        Weekday::Monday => DayType::Monday,
        Weekday::Tuesday => DayType::Tuesday,
        Weekday::Wednesday => DayType::Wednesday,
        Weekday::Thursday => DayType::Thursday,
        Weekday::Friday => DayType::Friday,
        Weekday::Saturday => DayType::Saturday,
        Weekday::Sunday => DayType::Sunday,
    }
}

pub fn to_domain_enrollment(status: &EnrollmentStatus) -> Enrollment {
    match status {
        EnrollmentStatus::Enrolled => Enrollment::Enrolled,
        EnrollmentStatus::Withdrawn => Enrollment::Withdrawn,
        EnrollmentStatus::Completed => Enrollment::Completed,
        EnrollmentStatus::Failed => Enrollment::Failed,
        EnrollmentStatus::Pending => Enrollment::Pending,
        EnrollmentStatus::Dropped => Enrollment::Dropped,
    }
}

pub fn to_db_enrollment(enrollment: &Enrollment) -> EnrollmentStatus {
    match enrollment {
        Enrollment::Enrolled => EnrollmentStatus::Enrolled,
        Enrollment::Withdrawn => EnrollmentStatus::Withdrawn,
        Enrollment::Completed => EnrollmentStatus::Completed,
        Enrollment::Failed => EnrollmentStatus::Failed,
        Enrollment::Pending => EnrollmentStatus::Pending,
        Enrollment::Dropped => EnrollmentStatus::Dropped,
    }
}

pub fn to_domain_session(session: &SessionType) -> Session {
    match session {
        SessionType::Theory => Session::Theory,
        SessionType::Lab => Session::Laboratory,
        SessionType::Seminar => Session::Seminar,
        SessionType::Practice => Session::Practice,
    }
}

pub fn to_db_session(session: &Session) -> SessionType {
    match session {
        Session::Theory => SessionType::Theory,
        Session::Laboratory => SessionType::Lab,
        Session::Seminar => SessionType::Seminar,
        Session::Practice => SessionType::Practice,
    }
}

pub fn to_domain_student_status(status: &StudentStatus) -> Student {
    match status {
        StudentStatus::Regular => Student::Regular,
        StudentStatus::Observado => Student::Observation,
        StudentStatus::Graduated => Student::Graduated,
    }
}

pub fn to_db_student_status(student: &Student) -> StudentStatus {
    match student {
        Student::Regular => StudentStatus::Regular,
        Student::Observation => StudentStatus::Observado,
        Student::Graduated => StudentStatus::Graduated,
    }
}

pub fn to_domain_contract(contract: &TeacherContract) -> Contract {
    match contract {
        TeacherContract::Contratado => Contract::Contracted,
        TeacherContract::Principal => Contract::Principal,
        TeacherContract::Asociado => Contract::Associate,
    }
}

pub fn to_db_contract(contract: &Contract) -> TeacherContract {
    match contract {
        Contract::Contracted => TeacherContract::Contratado,
        Contract::Principal => TeacherContract::Principal,
        Contract::Associate => TeacherContract::Asociado,
    }
}
